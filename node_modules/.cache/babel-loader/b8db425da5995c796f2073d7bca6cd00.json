{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"/home/tanvee/tanvee/nitp/17janv1/Decarbonate-2/src/components/user/Monthly.js\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useState } from 'react';\nimport { useAuth } from './../../firebase/auth';\nimport axios from 'axios';\nimport { Chart } from 'react-google-charts';\nexport default function Monthly() {\n  _s();\n\n  const [chartData, setChartData] = useState([['Month', 'Carbon emission in kgs']]);\n  const {\n    currentUser\n  } = useAuth();\n\n  if (currentUser && currentUser.uid) {\n    let data = {\n      uid: currentUser.uid\n    };\n    axios.post('http://localhost:8080/daily', data).then(response => {\n      function compare(a, b) {\n        if (a[0] < b[0]) {\n          return -1;\n        }\n\n        if (a[0] > b[0]) {\n          return 1;\n        }\n\n        return 0;\n      }\n\n      var graphdata = [];\n      console.log(response.data);\n\n      for (var i of response.data) {\n        graphdata.push([i.date, i.total]);\n      }\n\n      console.log(graphdata);\n      graphdata.sort(compare);\n      graphdata.unshift(['Day', 'Carbon emission in kgs']);\n      setChartData(graphdata);\n    }).catch(err => console.log('error --> ', err));\n  }\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    style: {\n      display: 'flex',\n      maxWidth: 1200\n    },\n    children: /*#__PURE__*/_jsxDEV(Chart, {\n      width: 1000,\n      height: 450,\n      chartType: \"ColumnChart\",\n      loader: /*#__PURE__*/_jsxDEV(\"div\", {\n        children: \"Loading Chart\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 46,\n        columnNumber: 25\n      }, this),\n      data: [['Month', 'Carbon emission in kgs'], ['January', 8175000], ['February', 3792000], ['March', 2695000], ['April', 2099000], ['May', 1526000], ['June', 1526000], ['July', 1526000], ['August', 1526000], ['September', 1526000], ['October', 1526000], ['November', 1526000], ['December', 1526000]],\n      options: {\n        title: 'Monhtly Carbon Emission',\n        chartArea: {\n          width: '70%'\n        },\n        hAxis: {\n          title: 'Month',\n          minValue: 0\n        },\n        vAxis: {\n          title: 'Carbon Emission in kgs'\n        }\n      },\n      legendToggle: true\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 42,\n      columnNumber: 13\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 41,\n    columnNumber: 9\n  }, this);\n}\n\n_s(Monthly, \"0PSyBAcnf7XeN6l8iWfLotuXj9c=\", false, function () {\n  return [useAuth];\n});\n\n_c = Monthly;\n;\n\nvar _c;\n\n$RefreshReg$(_c, \"Monthly\");","map":{"version":3,"sources":["/home/tanvee/tanvee/nitp/17janv1/Decarbonate-2/src/components/user/Monthly.js"],"names":["React","useEffect","useState","useAuth","axios","Chart","Monthly","chartData","setChartData","currentUser","uid","data","post","then","response","compare","a","b","graphdata","console","log","i","push","date","total","sort","unshift","catch","err","display","maxWidth","title","chartArea","width","hAxis","minValue","vAxis"],"mappings":";;;;;AAAA,OAAOA,KAAP,IAAeC,SAAf,EAA0BC,QAA1B,QAAyC,OAAzC;AACA,SAAQC,OAAR,QAAsB,uBAAtB;AACA,OAAOC,KAAP,MAAkB,OAAlB;AACA,SAAQC,KAAR,QAAoB,qBAApB;AAEA,eAAe,SAASC,OAAT,GAAmB;AAAA;;AAE9B,QAAM,CAACC,SAAD,EAAYC,YAAZ,IAA4BN,QAAQ,CAAC,CAAC,CAAC,OAAD,EAAU,wBAAV,CAAD,CAAD,CAA1C;AAEA,QAAM;AAAEO,IAAAA;AAAF,MAAkBN,OAAO,EAA/B;;AAGA,MAAIM,WAAW,IAAIA,WAAW,CAACC,GAA/B,EAAoC;AAChC,QAAIC,IAAI,GAAG;AAACD,MAAAA,GAAG,EAAED,WAAW,CAACC;AAAlB,KAAX;AACAN,IAAAA,KAAK,CAACQ,IAAN,CAAW,6BAAX,EAA0CD,IAA1C,EACKE,IADL,CACUC,QAAQ,IAAI;AACd,eAASC,OAAT,CAAiBC,CAAjB,EAAoBC,CAApB,EAAuB;AACnB,YAAID,CAAC,CAAC,CAAD,CAAD,GAAOC,CAAC,CAAC,CAAD,CAAZ,EAAiB;AACf,iBAAO,CAAC,CAAR;AACD;;AACD,YAAID,CAAC,CAAC,CAAD,CAAD,GAAOC,CAAC,CAAC,CAAD,CAAZ,EAAiB;AACf,iBAAO,CAAP;AACD;;AACD,eAAO,CAAP;AACH;;AACD,UAAIC,SAAS,GAAG,EAAhB;AACAC,MAAAA,OAAO,CAACC,GAAR,CAAYN,QAAQ,CAACH,IAArB;;AACA,WAAK,IAAIU,CAAT,IAAcP,QAAQ,CAACH,IAAvB,EAA6B;AACzBO,QAAAA,SAAS,CAACI,IAAV,CAAe,CAACD,CAAC,CAACE,IAAH,EAASF,CAAC,CAACG,KAAX,CAAf;AACH;;AACDL,MAAAA,OAAO,CAACC,GAAR,CAAYF,SAAZ;AACAA,MAAAA,SAAS,CAACO,IAAV,CAAeV,OAAf;AACAG,MAAAA,SAAS,CAACQ,OAAV,CAAkB,CAAC,KAAD,EAAQ,wBAAR,CAAlB;AACAlB,MAAAA,YAAY,CAACU,SAAD,CAAZ;AACH,KApBL,EAqBKS,KArBL,CAqBWC,GAAG,IAAIT,OAAO,CAACC,GAAR,CAAY,YAAZ,EAA0BQ,GAA1B,CArBlB;AAuBH;;AAED,sBACI;AAAK,IAAA,KAAK,EAAE;AAAEC,MAAAA,OAAO,EAAE,MAAX;AAAmBC,MAAAA,QAAQ,EAAE;AAA7B,KAAZ;AAAA,2BACI,QAAC,KAAD;AACI,MAAA,KAAK,EAAE,IADX;AAEI,MAAA,MAAM,EAAE,GAFZ;AAGI,MAAA,SAAS,EAAC,aAHd;AAII,MAAA,MAAM,eAAE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cAJZ;AAKI,MAAA,IAAI,EAAE,CACN,CAAC,OAAD,EAAU,wBAAV,CADM,EAEN,CAAC,SAAD,EAAY,OAAZ,CAFM,EAGN,CAAC,UAAD,EAAa,OAAb,CAHM,EAIN,CAAC,OAAD,EAAU,OAAV,CAJM,EAKN,CAAC,OAAD,EAAU,OAAV,CALM,EAMN,CAAC,KAAD,EAAQ,OAAR,CANM,EAON,CAAC,MAAD,EAAS,OAAT,CAPM,EAQN,CAAC,MAAD,EAAS,OAAT,CARM,EASN,CAAC,QAAD,EAAW,OAAX,CATM,EAUN,CAAC,WAAD,EAAc,OAAd,CAVM,EAWN,CAAC,SAAD,EAAY,OAAZ,CAXM,EAYN,CAAC,UAAD,EAAa,OAAb,CAZM,EAaN,CAAC,UAAD,EAAa,OAAb,CAbM,CALV;AAoBI,MAAA,OAAO,EAAE;AACTC,QAAAA,KAAK,EAAE,yBADE;AAETC,QAAAA,SAAS,EAAE;AAAEC,UAAAA,KAAK,EAAE;AAAT,SAFF;AAGTC,QAAAA,KAAK,EAAE;AACHH,UAAAA,KAAK,EAAE,OADJ;AAEHI,UAAAA,QAAQ,EAAE;AAFP,SAHE;AAOTC,QAAAA,KAAK,EAAE;AACHL,UAAAA,KAAK,EAAE;AADJ;AAPE,OApBb;AA+BI,MAAA,YAAY;AA/BhB;AAAA;AAAA;AAAA;AAAA;AADJ;AAAA;AAAA;AAAA;AAAA,UADJ;AAsCH;;GAxEuBzB,O;UAIIH,O;;;KAJJG,O;AAwEvB","sourcesContent":["import React, {useEffect, useState} from 'react';\nimport {useAuth} from './../../firebase/auth';\nimport axios from 'axios';\nimport {Chart} from 'react-google-charts';\n\nexport default function Monthly() {\n    \n    const [chartData, setChartData] = useState([['Month', 'Carbon emission in kgs']]);\n\n    const { currentUser } = useAuth();\n\n   \n    if (currentUser && currentUser.uid) {\n        let data = {uid: currentUser.uid};\n        axios.post('http://localhost:8080/daily', data)\n            .then(response => {\n                function compare(a, b) {\n                    if (a[0] < b[0]) {\n                      return -1;\n                    }\n                    if (a[0] > b[0]) {\n                      return 1;\n                    }\n                    return 0;\n                }\n                var graphdata = [];\n                console.log(response.data);\n                for (var i of response.data) {\n                    graphdata.push([i.date, i.total])\n                }\n                console.log(graphdata);\n                graphdata.sort(compare);\n                graphdata.unshift(['Day', 'Carbon emission in kgs']);\n                setChartData(graphdata);\n            })\n            .catch(err => console.log('error --> ', err));\n        \n    }\n\n    return (\n        <div style={{ display: 'flex', maxWidth: 1200 }}>\n            <Chart\n                width={1000}\n                height={450}\n                chartType=\"ColumnChart\"\n                loader={<div>Loading Chart</div>}\n                data={[\n                ['Month', 'Carbon emission in kgs'],\n                ['January', 8175000],\n                ['February', 3792000],\n                ['March', 2695000],\n                ['April', 2099000],\n                ['May', 1526000],\n                ['June', 1526000],\n                ['July', 1526000],\n                ['August', 1526000],\n                ['September', 1526000],\n                ['October', 1526000],\n                ['November', 1526000],\n                ['December', 1526000],\n                ]}\n                options={{\n                title: 'Monhtly Carbon Emission',\n                chartArea: { width: '70%' },\n                hAxis: {\n                    title: 'Month',\n                    minValue: 0,\n                },\n                vAxis: {\n                    title: 'Carbon Emission in kgs',\n                },\n                }}\n                legendToggle\n            />\n            \n            </div>\n    )\n};"]},"metadata":{},"sourceType":"module"}